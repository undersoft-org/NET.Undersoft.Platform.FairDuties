@inject IStringLocalizer<InputsLabels> Localizer

<div class="row g-3">
    <Divider Text="@Localizer["InputsLabelsDivider1"]" />
    <div class="col-12">
        <p>@((MarkupString)Localizer["InputsLabelsTips1"].Value)</p>
    </div>
    <div class="col-12">
        <BootstrapInput PlaceHolder="@PlaceHolderText" @bind-Value="@Model.Name"
                        DisplayText="@Localizer["InputLabelsText"]" ShowLabel="true" />
    </div>
    <Divider Text="@Localizer["InputsLabelsDivider2"]" />
    <div class="col-12">
        <p>@((MarkupString)Localizer["InputsLabelsTps2"].Value)</p>
    </div>
    <div class="col-12">
        <BootstrapInput PlaceHolder="@PlaceHolderText" @bind-Value="@Model.Name" ShowLabel="true" />
    </div>
    <Divider Text="@Localizer["InputsLabelsDivider3"]" />
    <div class="col-12">
        <p>@((MarkupString)Localizer["InputsLabelsTips3"].Value)</p>
    </div>
    <div class="col-12">
        <BootstrapInput PlaceHolder="@PlaceHolderText" @bind-Value="@Model.Name" />
    </div>
</div>

@code {
    private string? PlaceHolderText { get; set; }

    [NotNull]
    private Foo? Model { get; set; }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        PlaceHolderText = Localizer["PlaceHolder"];
        Model = new Foo() { Name = Localizer["TestName"] };
    }
}
