// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Undersoft.ODP.Infra.Data.Base.Contexts;

namespace Undersoft.ODP.Infra.Data.Base.Migrations.Entry
{
    [DbContext(typeof(EntryDb))]
    [Migration("20230427024504_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Asset>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("AssetsToAssetOptionals", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Group>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("AssetsToGroups", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Member>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("AssetsToMembers", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("AssetsToPropertys", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Union>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("AssetsToUnions", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Vertex>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("AssetsToVertexs", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Duty, Undersoft.ODP.Domain.Request>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("DutysToRequests", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Duty, Undersoft.ODP.Domain.Vector>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("DutysToVectors", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Estimate, Undersoft.ODP.Domain.Estimate>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("EstimatesToEstimateOptionals", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Group, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("GroupsToPropertys", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Group, Undersoft.ODP.Domain.Vertex>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("GroupsToVertexs", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Member, Undersoft.ODP.Domain.Group>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersToGroups", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Member, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersToPropertys", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Member, Undersoft.ODP.Domain.Vertex>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersToVertexs", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Profile, Undersoft.ODP.Domain.Client>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ProfilesToClients", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Profile, Undersoft.ODP.Domain.Contact>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ProfilesToContacts", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Profile, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ProfilesToPropertys", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Property, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("PropertysToPropertys", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Setup, Undersoft.ODP.Domain.Option>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("SetupsToOptions", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Union, Undersoft.ODP.Domain.Member>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("UnionsToMembers", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Union, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("UnionsToPropertys", "Relation");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Union, Undersoft.ODP.Domain.Vertex>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("UnionsToVertexs", "Relation");
                });

            modelBuilder.Entity("RadicalR.Identifier<Undersoft.ODP.Domain.Client>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("Key");

                    b.HasIndex("Ordinal");

                    b.ToTable("ClientIdentifiers", "Identifier");
                });

            modelBuilder.Entity("RadicalR.Identifier<Undersoft.ODP.Domain.Member>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("Key");

                    b.HasIndex("Ordinal");

                    b.ToTable("MemberIdentifiers", "Identifier");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Address", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Notices")
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Ordinal");

                    b.HasIndex("StateId");

                    b.ToTable("Addresses", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Asset", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Assets", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Client", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ClientDoamin")
                        .HasColumnType("text");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("HostName")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("MachineName")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("OsVersion")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Clients", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Contact", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notices")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PhoneType")
                        .HasColumnType("integer");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Locales", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Country", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Continent")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Ordinal");

                    b.ToTable("Countries", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.CountryState", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Ordinal");

                    b.ToTable("CountryStates", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Currency", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Currencies", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Duty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("EstimateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasRequests")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequested")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VectorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.HasIndex("Ordinal");

                    b.HasIndex("UnionId");

                    b.HasIndex("VectorId");

                    b.ToTable("Duties", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Estimate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<double>("Checksum")
                        .HasColumnType("double precision");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("DependentByAny")
                        .HasColumnType("boolean");

                    b.Property<int>("Exchanges")
                        .HasColumnType("integer");

                    b.Property<int>("FreeDuties")
                        .HasColumnType("integer");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("Holidays")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Monthly")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OffDuties")
                        .HasColumnType("integer");

                    b.Property<int>("OnDuties")
                        .HasColumnType("integer");

                    b.Property<bool>("OptionalFromAny")
                        .HasColumnType("boolean");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double>("Rank")
                        .HasColumnType("double precision");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<double>("Total")
                        .HasColumnType("double precision");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<int>("Weekends")
                        .HasColumnType("integer");

                    b.Property<int>("Weekly")
                        .HasColumnType("integer");

                    b.Property<int>("Yearly")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.HasIndex("Ordinal");

                    b.HasIndex("UnionId");

                    b.ToTable("Estimates", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Group", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<float>("BlockCapacity")
                        .HasColumnType("real");

                    b.Property<float>("BlockSeed")
                        .HasColumnType("real");

                    b.Property<int>("BlockSize")
                        .HasColumnType("integer");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("LastEstimateOrdinal")
                        .HasColumnType("integer");

                    b.Property<long?>("LeadershipId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<float>("SectorCapacity")
                        .HasColumnType("real");

                    b.Property<int>("SectorSize")
                        .HasColumnType("integer");

                    b.Property<long?>("SetupId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.Property<long?>("VectorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LeadershipId");

                    b.HasIndex("Ordinal");

                    b.HasIndex("UnionId");

                    b.ToTable("Groups", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Language", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Languages", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Member", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("LastEstimateOrdinal")
                        .HasColumnType("integer");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<long?>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfilelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SetupId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.HasIndex("Ordinal");

                    b.ToTable("Members", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Option", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Options", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Profile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Profiles", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Property", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Properties", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Request", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.HasIndex("Ordinal");

                    b.ToTable("Requests", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("Ordinal");

                    b.ToTable("Roles", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Session", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("ConnectedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("DurationTime")
                        .HasColumnType("integer");

                    b.Property<string>("HID")
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Ordinal");

                    b.ToTable("Sessions", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Setup", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SetupId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.HasIndex("PropertyId");

                    b.HasIndex("SetupId")
                        .IsUnique();

                    b.ToTable("Setups", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Union", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("LastEstimateOrdinal")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Notices")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("SetupId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Unions", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Vector", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupViewId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsView")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("VectorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupViewId");

                    b.HasIndex("Ordinal");

                    b.HasIndex("VectorId")
                        .IsUnique();

                    b.ToTable("Vectors", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Vertex", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EndBlock")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("StartBlock")
                        .HasColumnType("integer");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Vertices", "Local");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Asset>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Asset", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Asset", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Group>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Asset", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Group", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Member>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Asset", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Member", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Asset", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Property", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Union>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Asset", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Union", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Asset, Undersoft.ODP.Domain.Vertex>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Asset", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Vertex", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Duty, Undersoft.ODP.Domain.Request>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Duty", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Request", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Duty, Undersoft.ODP.Domain.Vector>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Duty", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Vector", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Estimate, Undersoft.ODP.Domain.Estimate>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Estimate", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Estimate", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Group, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Group", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Property", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Group, Undersoft.ODP.Domain.Vertex>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Group", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Vertex", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Member, Undersoft.ODP.Domain.Group>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Group", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Member, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Property", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Member, Undersoft.ODP.Domain.Vertex>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Vertex", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Profile, Undersoft.ODP.Domain.Client>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Profile", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Client", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Profile, Undersoft.ODP.Domain.Contact>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Profile", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Contact", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Profile, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Profile", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Property", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Property, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Property", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Property", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Setup, Undersoft.ODP.Domain.Option>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Setup", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Option", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Union, Undersoft.ODP.Domain.Member>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Union", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Member", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Union, Undersoft.ODP.Domain.Property>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Union", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Property", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.EntityLink<Undersoft.ODP.Domain.Union, Undersoft.ODP.Domain.Vertex>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Union", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Vertex", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("RadicalR.Identifier<Undersoft.ODP.Domain.Client>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Client", "Entity")
                        .WithMany("Identifiers")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("RadicalR.Identifier<Undersoft.ODP.Domain.Member>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Member", "Entity")
                        .WithMany("Identifiers")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Address", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId");

                    b.HasOne("Undersoft.ODP.Domain.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId");

                    b.HasOne("Undersoft.ODP.Domain.CountryState", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId");

                    b.Navigation("Contact");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Country", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Currency", "Currency")
                        .WithMany("Countries")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Undersoft.ODP.Domain.Language", "Language")
                        .WithMany("Countries")
                        .HasForeignKey("LanguageId");

                    b.Navigation("Currency");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.CountryState", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Duty", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Asset", "Asset")
                        .WithMany("Duties")
                        .HasForeignKey("AssetId");

                    b.HasOne("Undersoft.ODP.Domain.Group", "Group")
                        .WithMany("Duties")
                        .HasForeignKey("GroupId");

                    b.HasOne("Undersoft.ODP.Domain.Member", "Member")
                        .WithMany("Duties")
                        .HasForeignKey("MemberId");

                    b.HasOne("Undersoft.ODP.Domain.Union", "Union")
                        .WithMany("Duties")
                        .HasForeignKey("UnionId");

                    b.HasOne("Undersoft.ODP.Domain.Vector", "Vector")
                        .WithMany("Duties")
                        .HasForeignKey("VectorId");

                    b.Navigation("Asset");

                    b.Navigation("Group");

                    b.Navigation("Member");

                    b.Navigation("Union");

                    b.Navigation("Vector");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Estimate", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Asset", "Asset")
                        .WithMany("Estimates")
                        .HasForeignKey("AssetId");

                    b.HasOne("Undersoft.ODP.Domain.Group", "Group")
                        .WithMany("Estimates")
                        .HasForeignKey("GroupId");

                    b.HasOne("Undersoft.ODP.Domain.Member", "Member")
                        .WithMany("Estimates")
                        .HasForeignKey("MemberId");

                    b.HasOne("Undersoft.ODP.Domain.Union", "Union")
                        .WithMany("Estimates")
                        .HasForeignKey("UnionId");

                    b.Navigation("Asset");

                    b.Navigation("Group");

                    b.Navigation("Member");

                    b.Navigation("Union");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Group", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Member", "Leadership")
                        .WithMany("Leaderships")
                        .HasForeignKey("LeadershipId");

                    b.HasOne("Undersoft.ODP.Domain.Union", "Union")
                        .WithMany("Groups")
                        .HasForeignKey("UnionId");

                    b.Navigation("Leadership");

                    b.Navigation("Union");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Member", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Profile", "Profile")
                        .WithOne("Member")
                        .HasForeignKey("Undersoft.ODP.Domain.Member", "MemberId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Request", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Group", "Group")
                        .WithMany("Requests")
                        .HasForeignKey("GroupId");

                    b.HasOne("Undersoft.ODP.Domain.Member", "Member")
                        .WithMany("Requests")
                        .HasForeignKey("MemberId");

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Role", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Member", "Member")
                        .WithMany("Roles")
                        .HasForeignKey("MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Session", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Client", "Client")
                        .WithMany("Sessions")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Setup", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Property", null)
                        .WithMany("Setups")
                        .HasForeignKey("PropertyId");

                    b.HasOne("Undersoft.ODP.Domain.Group", "Group")
                        .WithOne("Setup")
                        .HasForeignKey("Undersoft.ODP.Domain.Setup", "SetupId");

                    b.HasOne("Undersoft.ODP.Domain.Member", "Member")
                        .WithOne("Setup")
                        .HasForeignKey("Undersoft.ODP.Domain.Setup", "SetupId");

                    b.HasOne("Undersoft.ODP.Domain.Union", "Union")
                        .WithOne("Setup")
                        .HasForeignKey("Undersoft.ODP.Domain.Setup", "SetupId");

                    b.Navigation("Group");

                    b.Navigation("Member");

                    b.Navigation("Union");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Vector", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Group", "GroupView")
                        .WithMany("VectorViews")
                        .HasForeignKey("GroupViewId");

                    b.HasOne("Undersoft.ODP.Domain.Group", "Group")
                        .WithOne("Vector")
                        .HasForeignKey("Undersoft.ODP.Domain.Vector", "VectorId");

                    b.Navigation("Group");

                    b.Navigation("GroupView");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Asset", b =>
                {
                    b.Navigation("Duties");

                    b.Navigation("Estimates");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Client", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Contact", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.CountryState", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Currency", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Group", b =>
                {
                    b.Navigation("Duties");

                    b.Navigation("Estimates");

                    b.Navigation("Requests");

                    b.Navigation("Setup");

                    b.Navigation("Vector");

                    b.Navigation("VectorViews");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Language", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Member", b =>
                {
                    b.Navigation("Duties");

                    b.Navigation("Estimates");

                    b.Navigation("Identifiers");

                    b.Navigation("Leaderships");

                    b.Navigation("Requests");

                    b.Navigation("Roles");

                    b.Navigation("Setup");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Profile", b =>
                {
                    b.Navigation("Member");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Property", b =>
                {
                    b.Navigation("Setups");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Union", b =>
                {
                    b.Navigation("Duties");

                    b.Navigation("Estimates");

                    b.Navigation("Groups");

                    b.Navigation("Setup");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Vector", b =>
                {
                    b.Navigation("Duties");
                });
#pragma warning restore 612, 618
        }
    }
}
