// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Undersoft.ODP.Infra.Data.Base.Contexts;

namespace Undersoft.ODP.Infra.Data.Base.Migrations.Report
{
    [DbContext(typeof(ReportDbContext))]
    partial class ReportDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Attribute, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("AttributesToAttributes", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Configuration, Undersoft.ODP.Domain.Setting>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ConfigurationsToSettings", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Organization, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("OrganizationsToAttributes", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Organization, Undersoft.ODP.Domain.Plan>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("OrganizationsToPlans", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Organization, Undersoft.ODP.Domain.User>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("OrganizationsToUsers", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Personal, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("PersonalsToAttributes", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Personal, Undersoft.ODP.Domain.Contact>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("PersonalsToContacts", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Personal, Undersoft.ODP.Domain.Device>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("PersonalsToDevices", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Shift, Undersoft.ODP.Domain.Schedule>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ShiftsToSchedules", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Shift, Undersoft.ODP.Domain.ShiftRequest>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ShiftsToShiftRequests", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftRate, Undersoft.ODP.Domain.ShiftRate>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ShiftRatesToShiftRateOptionals", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ShiftTypesToAttributes", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.Organization>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ShiftTypesToOrganizations", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.Plan>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ShiftTypesToPlans", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.ShiftType>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ShiftTypesToShiftTypeOptionals", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.Team>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ShiftTypesToTeams", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.User>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ShiftTypesToUsers", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Team, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("TeamsToAttributes", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Team, Undersoft.ODP.Domain.Plan>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("TeamsToPlans", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.User, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("UsersToAttributes", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.User, Undersoft.ODP.Domain.Plan>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("UsersToPlans", "Relation");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.User, Undersoft.ODP.Domain.Team>", b =>
                {
                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("UsersToTeams", "Relation");
                });

            modelBuilder.Entity("UltimatR.Identifier<Undersoft.ODP.Domain.Device>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("Key");

                    b.HasIndex("Ordinal");

                    b.ToTable("DeviceIdentifiers", "Identifier");
                });

            modelBuilder.Entity("UltimatR.Identifier<Undersoft.ODP.Domain.User>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("Key");

                    b.HasIndex("Ordinal");

                    b.ToTable("UserIdentifiers", "Identifier");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Address", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Notices")
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Ordinal");

                    b.HasIndex("StateId");

                    b.ToTable("Addresses", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Attribute", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Attributes", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Configuration", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AttributeId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("ConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.HasIndex("Ordinal");

                    b.ToTable("Configurations", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Contact", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notices")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PhoneType")
                        .HasColumnType("integer");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Contacts", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Country", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Continent")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Ordinal");

                    b.ToTable("Countries", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.CountryLanguage", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("CountryLanguages", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.CountryState", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Ordinal");

                    b.ToTable("CountryStates", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Currency", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Currencies", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Device", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("HostName")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SystemInfo")
                        .HasColumnType("text");

                    b.Property<string>("SystemVersion")
                        .HasColumnType("text");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Devices", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.DeviceSession", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("ConnectedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<int>("DurationTime")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("MACAddress")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("Ordinal");

                    b.ToTable("DeviceSessions", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Organization", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("ConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("LastRateOrdinal")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Notices")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Organizations", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Personal", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Personals", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Plan", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Plans", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsView")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamViewId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.HasIndex("TeamViewId");

                    b.ToTable("Schedules", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Setting", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Shift", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("HasRequests")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequested")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShiftRateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShiftTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("WorkMode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("ShiftTypeId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Shifts", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.ShiftRate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<double>("Checksum")
                        .HasColumnType("double precision");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("DependentByAny")
                        .HasColumnType("boolean");

                    b.Property<int>("Exchanges")
                        .HasColumnType("integer");

                    b.Property<int>("FreeShifts")
                        .HasColumnType("integer");

                    b.Property<int>("Holidays")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Monthly")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OffShifts")
                        .HasColumnType("integer");

                    b.Property<int>("OnShifts")
                        .HasColumnType("integer");

                    b.Property<bool>("OptionalFromAny")
                        .HasColumnType("boolean");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double>("Rank")
                        .HasColumnType("double precision");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<long?>("ShiftTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<double>("Total")
                        .HasColumnType("double precision");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<int>("Weekends")
                        .HasColumnType("integer");

                    b.Property<int>("Weekly")
                        .HasColumnType("integer");

                    b.Property<int>("Yearly")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ShiftTypeId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("ShiftRates", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.ShiftRequest", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("ShiftRequests", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.ShiftType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.ToTable("ShiftTypes", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Team", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<float>("BlockCapacity")
                        .HasColumnType("real");

                    b.Property<int>("BlockSize")
                        .HasColumnType("integer");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("ConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float>("FrameCapacity")
                        .HasColumnType("real");

                    b.Property<float>("FrameSeed")
                        .HasColumnType("real");

                    b.Property<int>("FrameSize")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("LastRateOrdinal")
                        .HasColumnType("integer");

                    b.Property<long?>("LeadershipId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<int>("ShiftUnit")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("LeadershipId");

                    b.HasIndex("Ordinal");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Teams", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("ConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("LastRateOrdinal")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("PersonalId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users", "Local");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OriginName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Ordinal");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "Local");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Attribute, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Attribute", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Attribute", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Configuration, Undersoft.ODP.Domain.Setting>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Configuration", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Organization, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Organization", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Attribute", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Organization, Undersoft.ODP.Domain.Plan>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Organization", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Plan", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Organization, Undersoft.ODP.Domain.User>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Organization", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.User", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Personal, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Personal", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Attribute", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Personal, Undersoft.ODP.Domain.Contact>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Personal", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Contact", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Personal, Undersoft.ODP.Domain.Device>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Personal", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Device", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Shift, Undersoft.ODP.Domain.Schedule>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Shift", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Schedule", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Shift, Undersoft.ODP.Domain.ShiftRequest>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Shift", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.ShiftRequest", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftRate, Undersoft.ODP.Domain.ShiftRate>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.ShiftRate", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.ShiftRate", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.ShiftType", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Attribute", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.Organization>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.ShiftType", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Organization", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.Plan>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.ShiftType", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Plan", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.ShiftType>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.ShiftType", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.ShiftType", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.Team>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.ShiftType", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Team", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.ShiftType, Undersoft.ODP.Domain.User>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.ShiftType", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.User", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Team, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Team", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Attribute", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.Team, Undersoft.ODP.Domain.Plan>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Team", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Plan", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.User, Undersoft.ODP.Domain.Attribute>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.User", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Attribute", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.User, Undersoft.ODP.Domain.Plan>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.User", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Plan", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.EntityLink<Undersoft.ODP.Domain.User, Undersoft.ODP.Domain.Team>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.User", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.ODP.Domain.Team", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("UltimatR.Identifier<Undersoft.ODP.Domain.Device>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Device", "Entity")
                        .WithMany("Identifiers")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("UltimatR.Identifier<Undersoft.ODP.Domain.User>", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.User", "Entity")
                        .WithMany("Identifiers")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Address", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId");

                    b.HasOne("Undersoft.ODP.Domain.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId");

                    b.HasOne("Undersoft.ODP.Domain.CountryState", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId");

                    b.Navigation("Contact");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Configuration", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Attribute", null)
                        .WithMany("Configurations")
                        .HasForeignKey("AttributeId");

                    b.HasOne("Undersoft.ODP.Domain.Organization", "Organization")
                        .WithOne("Configuration")
                        .HasForeignKey("Undersoft.ODP.Domain.Configuration", "ConfigurationId");

                    b.HasOne("Undersoft.ODP.Domain.Team", "Team")
                        .WithOne("Configuration")
                        .HasForeignKey("Undersoft.ODP.Domain.Configuration", "ConfigurationId");

                    b.HasOne("Undersoft.ODP.Domain.User", "User")
                        .WithOne("Configuration")
                        .HasForeignKey("Undersoft.ODP.Domain.Configuration", "ConfigurationId");

                    b.Navigation("Organization");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Country", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Currency", "Currency")
                        .WithMany("Countries")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Undersoft.ODP.Domain.CountryLanguage", "Language")
                        .WithMany("Countries")
                        .HasForeignKey("LanguageId");

                    b.Navigation("Currency");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.CountryState", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.DeviceSession", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Device", "Device")
                        .WithMany("Sessions")
                        .HasForeignKey("DeviceId");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Schedule", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Team", "Team")
                        .WithOne("Schedule")
                        .HasForeignKey("Undersoft.ODP.Domain.Schedule", "ScheduleId");

                    b.HasOne("Undersoft.ODP.Domain.Team", "TeamView")
                        .WithMany("ScheduleViews")
                        .HasForeignKey("TeamViewId");

                    b.Navigation("Team");

                    b.Navigation("TeamView");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Shift", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Organization", "Organization")
                        .WithMany("Shifts")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Undersoft.ODP.Domain.Schedule", "Schedule")
                        .WithMany("Shifts")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("Undersoft.ODP.Domain.ShiftType", "ShiftType")
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftTypeId");

                    b.HasOne("Undersoft.ODP.Domain.Team", "Team")
                        .WithMany("Shifts")
                        .HasForeignKey("TeamId");

                    b.HasOne("Undersoft.ODP.Domain.User", "User")
                        .WithMany("Shifts")
                        .HasForeignKey("UserId");

                    b.Navigation("Organization");

                    b.Navigation("Schedule");

                    b.Navigation("ShiftType");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.ShiftRate", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Organization", "Organization")
                        .WithMany("ShiftRates")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Undersoft.ODP.Domain.ShiftType", "ShiftType")
                        .WithMany("ShiftRates")
                        .HasForeignKey("ShiftTypeId");

                    b.HasOne("Undersoft.ODP.Domain.Team", "Team")
                        .WithMany("ShiftRates")
                        .HasForeignKey("TeamId");

                    b.HasOne("Undersoft.ODP.Domain.User", "User")
                        .WithMany("ShiftRates")
                        .HasForeignKey("UserId");

                    b.Navigation("Organization");

                    b.Navigation("ShiftType");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.ShiftRequest", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Team", "Team")
                        .WithMany("ShiftRequests")
                        .HasForeignKey("TeamId");

                    b.HasOne("Undersoft.ODP.Domain.User", "User")
                        .WithMany("ShiftRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Team", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.User", "Leadership")
                        .WithMany("Leaderships")
                        .HasForeignKey("LeadershipId");

                    b.HasOne("Undersoft.ODP.Domain.Organization", "Organization")
                        .WithMany("Teams")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Leadership");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.User", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.Personal", "Personal")
                        .WithOne("User")
                        .HasForeignKey("Undersoft.ODP.Domain.User", "UserId");

                    b.Navigation("Personal");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.UserRole", b =>
                {
                    b.HasOne("Undersoft.ODP.Domain.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Attribute", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Contact", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.CountryLanguage", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.CountryState", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Currency", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Device", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Organization", b =>
                {
                    b.Navigation("Configuration");

                    b.Navigation("ShiftRates");

                    b.Navigation("Shifts");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Personal", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Schedule", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.ShiftType", b =>
                {
                    b.Navigation("ShiftRates");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.Team", b =>
                {
                    b.Navigation("Configuration");

                    b.Navigation("Schedule");

                    b.Navigation("ScheduleViews");

                    b.Navigation("ShiftRates");

                    b.Navigation("ShiftRequests");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Undersoft.ODP.Domain.User", b =>
                {
                    b.Navigation("Configuration");

                    b.Navigation("Identifiers");

                    b.Navigation("Leaderships");

                    b.Navigation("Roles");

                    b.Navigation("ShiftRates");

                    b.Navigation("ShiftRequests");

                    b.Navigation("Shifts");
                });
#pragma warning restore 612, 618
        }
    }
}
